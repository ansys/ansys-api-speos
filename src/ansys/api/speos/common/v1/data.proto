// (c) 2024 ANSYS, Inc. Unauthorized use, distribution, or duplication is prohibited. ANSYS Confidential Information
syntax = "proto3";

package ansys.api.speos.common.v1;

//////////////
// MESSAGES //
//////////////


enum Unit {
	// Energetic units
	watts = 0; // W
	watts_per_square_meters = 1; // W/(m2)
	watts_per_steradians = 2; // W/(sr)
	watts_per_square_meters_steradians = 3; // W/(m2.sr)
	watts_per_steradians_nanometers = 4; // W/(sr.nm)
	watts_per_square_meters_nanometers = 5; // W/(m2.nm)

	joules_per_square_meters = 6; // J/(m2)
	joules_per_square_meters_nanometers = 7; // J/(m2.nm)

	luxes = 15; // lx
	luxes_seconds = 16; // lx.s
	luxes_per_nanometers = 17; // lx.s/(nm)
	luxes_seconds_per_nanometers = 18; // lx.s/(nm)

	candelas = 28; // cd
	candelas_per_square_meters = 29; // cd/(m2)
	candelas_per_nanometers = 30; // cd/(m2)
	candelas_per_squaremeters_nanometers = 31; // cd/(m2.nm)

	lumens = 45; // lm
	lumens_per_square_meters_nanometers = 49; // lm/(m2.nm) 
}

enum Magnitude {
	irradiance = 0; // radiometric irradiance 
	illuminance = 1; // photometric irradiance
	spectral_irradiance = 2; // spectral irradiance
	spectral_illuminance = 3; // spectral photometric irradiance
	radiance = 4; // radiometric radiance
	luminance = 5; // photometric radiance
	spectral_radiance = 6; // spectral radiometric radiance
	spectral_luminance = 7; // spectral photometric radiance
	radiant_intensity = 8; // radiometric intensity
	luminous_intensity = 9; // photometric intensity
	spectral_radiant_intensity = 10; // spectral radiometric intensity
	spectral_luminous_intensity = 11; // spectral photometric intensity
	exposure = 12; // radiometric exposure
	luminous_exposure = 13; // photometric exposure
	spectral_exposure = 14; // spectral radiometric exposure
	spectral_luminous_exposure = 15; // spectral photometric exposure

	radiant_flux = 16; // radiometric flux
	luminous_flux = 17; // photometric flux
}

// units serving as coordinates
enum CoordinatesUnit {
	// spacial units
	millimeters = 0; // mm
	meters = 1; // m
	radians = 2; // rad
	degrees 3; // deg
	steradians = 4; // sr
}

// arrays values
message DataDoubles {
	repeated double values = 1; // raw values
	repeated uint64 dimensions = 2; // size of dimensions = total number of dimension representation of the data, each value representing its dimension size
	Magnitude magnitude = 3; // magnitude of the value cf what we have received
	Unit unit = 4; // units of the values
}

message DataIntegers {
	repeated int64 values = 1; // raw values
	repeated uint64 dimensions = 2; // size of dimensions = total number of dimension representation of the data, each value representing its dimension size
	Magnitude magnitude = 3; // magnitude of the value cf what we have received
	Unit unit = 4; // units of the values
}

// single values
message DatumDouble {
	double value = 1; // raw value
	Magnitude magnitude = 2; // magnitude of the value cf what we have received
	Unit unit = 3; // units of the values
}

message DatumInteger {
	uint64 value = 1; // raw values
	Magnitude magnitude = 2; // magnitude of the value cf what we have received
	Unit unit = 3; // units of the values
}

