// (c) 2023 ANSYS, Inc. Unauthorized use, distribution, or duplication is prohibited.
syntax = "proto3";
package ansys.api.speos.live_preview.v1;

import "google/protobuf/wrappers.proto";

// Service for live previews manager.
service LivePreviewsManager {
	// Create a LivePreview.
	rpc Create(Create_Request) returns (Create_Response) {}

	// Delete a LivePreview
	rpc Delete(Delete_Request) returns (Delete_Response) {}

	// List of all LivePreviews in LivePreviewsManager.
	rpc List(List_Request) returns (List_Response) {}

	// Retrieve details of a LivePreview.
	rpc Details(Details_Request) returns (Details_Response) {}
}

// Request to create a LivePreview.
message Create_Request {
	string job_guid = 1; // Guid of the Job in JobsManager.
}

message Create_Response {
	string guid = 1; // Guid of the LivePreview in LivePreviewsManager.
}

// Request to delete a LivePreview.
message Delete_Request {
	string guid = 1; // Guid of the LivePreview in LivePreviewsManager.
}
message Delete_Response {}

message List_Request {}

message List_Response {
	repeated string guids = 1; // Guids of the LivePreviews in LivePreviewsManager.
}

// The different types of sensors.
enum TypeSensor {
	TypeSensor3DIrradiance		= 0;
	TypeSensorIntensity			= 1;
	TypeSensorIrradiance		= 2;
	TypeSensorPolarIntensity	= 3;
	TypeSensorRadiance			= 4;
	TypeSensorRayFile			= 5;
	TypeSensorCamera			= 6;
	TypeSensorVolumeMap			= 7;
	TypeSensorImmersive			= 8;
	TypeSensorObserver			= 9;
	TypeSensorLightMap			= 10;
	TypeSensorSet				= 11;
	TypeSensorEye				= 12;
	TypeSensorLightField		= 13;
	TypeSensorMultiBeamLidar	= 14;
	TypeSensorUnknown			= 15;
}

// sensor information in the order of the indices  - the first sensor has index 0 the last Number-1.
message SensorInfo {
	string name		= 1; // The name of the sensor.
	TypeSensor type	= 2; // The type of the sensor.
}

message Details_Request{
	string guid	= 1; // Guid of the LivePreview in LivePreviewsManager.
}
message Resolutions{
	uint32 x = 1;
	uint32 y = 2;
}
message Details_Response{
	repeated SensorInfo sensor_info = 1; // The sensors information.
	Resolutions resolutions_max = 2;  // The maximum sensor resolutions available in the simulation - to allocate the maximum size of the Livepreview bitmap.
}

// Service to handle a live preview.
service LivePreview {
	// Live preview initialization.
	rpc InitPreview(InitPreview_Request) returns (InitPreview_Response) {}

	// Retrieve previews.
	rpc GetPreviews(GetPreviews_Request) returns (stream Preview) {}

	// obtain the projection point from a 2d position.
	rpc ProjectPixel(ProjectPixel_Request) returns (ProjectPixel_Response) {}

	// sensor setting.
	rpc SensorSetting(SensorSetting_Request) returns (SensorSetting_Response) {}

	// Change sensor setting.
	rpc UpdateSensorSetting(UpdateSensorSetting_Request) returns (UpdateSensorSetting_Response) {}

	// preview setting.
	rpc PreviewsSetting(PreviewsSetting_Request) returns (PreviewsSetting_Response) {}

	// Change preview setting. 
	rpc UpdatePreviewsSetting(UpdatePreviewsSetting_Request) returns (UpdatePreviewsSetting_Response) {}

	// Stop the live preview.
	rpc Stop(Stop_Request) returns (Stop_Response) {}

	// Pause the live preview.
	rpc Pause(Pause_Request) returns (Pause_Response) {}

	// Resume the live preview.
	rpc Resume(Resume_Request) returns (Resume_Response) {}

	// Export current view of the live preview - only in xmp for the moment.
	rpc ExportCurrentView(ExportCurrentView_Request) returns (ExportCurrentView_Response) {}
}

message InitPreview_Request {
	string guid = 1; // Guid of the LivePreview in LivePreviewsManager.
	int32 sensor_id = 2; // Index of the sensor to be displayed.
}

message InitPreview_Response {
	repeated string name_of_layers = 1; // The list of layers name in the sensor.
	Resolutions resolutions = 2;  // The resolutions of the image rendered by the sensor.
}

message GetPreviews_Request {
	string guid = 1;  // Guid of the LivePreview in LivePreviewsManager.
	google.protobuf.Int32Value layer_id = 2; // layer id if precised - else all layers.
}

message Image {
	Resolutions resolutions = 1; // The resolutions of the image rendered by the sensor.
	bytes data = 2;			// The bitmap in RGB24 format.
	float max_value	= 3;	// The maximum adaptation value.
	float min_value	= 4;	// The minimum adaptation value.
	float avg_value	= 5;    // The average adaptation value.
}

message Preview {
	bytes binary = 1; // Currently, this corresponds to Image serialized as string.
}

message Coordinate2d{
	double x = 1;
	double y = 2;
}

message Coordinate3d{
	double x = 1;
	double y = 2;
	double z = 3;
}

message ProjectPixel_Request {
	string guid		= 1; // Guid of the preview in LivePreviewManager.
	Coordinate3d position_3d	= 2; // The pixel position of the projection point from the view the position of the sensor.
	Coordinate3d direction_3d	= 3; // The direction of the projection point from the view the position of the sensor.
}

message ProjectPixel_Response {
	Coordinate3d coordinate_3d	= 1; // The projection pixel.
}

message AxisSystem{
	Coordinate3d point_origin = 1;
	Coordinate3d vector_x = 2;
	Coordinate3d vector_y = 3;
	Coordinate3d vector_z = 4;
}

// The different mode of focal.
enum FocalMode{
	Focal = 0;
	Observer = 1;
}

message Dimensions{
	double min = 1;
	double max = 2;
}

message SensorSetting{
	AxisSystem axis_system = 1;		// The matrix position of the sensor.
	FocalMode focal_mode = 2;		// The type of focus - standard or observer.
	Coordinate3d point_focal = 3;   // Focal point position - for a distance only z-axis will be defined.
	Dimensions dimension_x = 4;		// The extremes of the preview rendering in x.
	uint32 sampling_x = 5;			// The resolutions in x.
	Dimensions dimension_y = 6;		// The extremes of the preview rendering in y.
	uint32 sampling_y = 7;			// The resolutions in y.
}

message SensorSetting_Request{
	string guid		= 1; // Guid of the preview in LivePreviewManager.
}

message SensorSetting_Response{
	SensorSetting setting = 1; // Setting sensor.
}

message UpdateSensorSetting_Request{
	string guid		= 1;		// Guid of the preview in LivePreviewManager.
	SensorSetting setting = 2;	// Setting sensor.
}

message UpdateSensorSetting_Response{}

// The different mode of display.
enum DisplayMode{
	TrueColor			= 0;
	FalseColor			= 1;
	HVLocalAdaptation	= 2;
	HVDynamicAdaptation = 3;
}

// Setting rendering preview.
message PreviewsSetting {
	DisplayMode display_mode		= 1; // Mode display.
	bool enable_maintain_lightness	= 2; // Status of maintain lightness - actived by default.
	bool use_default_max_value		= 3; // Status of the use of the maximum adaptation value.  - actived by default switch to false to customize the value  
	double max_value				= 4; // Customise the maximum adaptation value.
}

message PreviewsSetting_Request {
	string guid = 1; // Guid of the LivePreview in LivePreviewsManager.
}

message PreviewsSetting_Response {
	PreviewsSetting setting = 1; // Setting rendering preview.
}

message UpdatePreviewsSetting_Request {
	string guid = 1; // Guid of the LivePreview in LivePreviewsManager.
	PreviewsSetting setting = 2; // Setting rendering preview.
}

message UpdatePreviewsSetting_Response {}

message Stop_Request {
	string guid = 1; // Guid of the LivePreview in LivePreviewsManager.
}

message Stop_Response {}

message Pause_Request {
	string guid = 1; // Guid of the LivePreview in LivePreviewsManager.
}

message Pause_Response {}

message Resume_Request {
	string guid = 1; // Guid of the LivePreview in LivePreviewsManager.
}

message Resume_Response {}

message ExportCurrentView_Request {
	string guid = 1; // Guid of the LivePreview in LivePreviewsManager.
	string file_name = 3; // Name of the output file.
}

message ExportCurrentView_Response {}
