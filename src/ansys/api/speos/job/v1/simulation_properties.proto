// (c) 2024 ANSYS, Inc. Unauthorized use, distribution, or duplication is prohibited.
syntax = "proto3";

package ansys.api.speos.job.v1;

// No optimization : the same number of passes is used for each pixel of the image
message OptimizedPropagationNone {
	optional uint32 stop_condition_passes_number = 1; // To stop the simulation after a certain number of passes
	optional int64 stop_condition_duration = 2; // Deprecated - use instead InverseMCSimulationProperties.stop_condition_duration
}
// The algorithm adapts the number of passes per pixel to send the optimal number of rays according to the signal each pixel needs.
// As a result, the SNR is adequate in areas where pixels need more rays thus giving a balanced image.
// The Optimized propagation algorithm is only compatible with the Radiance sensors.
message OptimizedPropagationRelative {
	uint32 min_pass_number = 1; // Minimum number of passes without pass optimization.
	uint32 stop_condition_relative_value = 2; // Relative pixel standard deviation threshold, in percent. Value expected from 0 to 100.
}
// The algorithm adapts the number of passes per pixel to send the optimal number of rays according to the signal each pixel needs.
// As a result, the SNR is adequate in areas where pixels need more rays thus giving a balanced image.
// The Optimized propagation algorithm is only compatible with the Radiance sensors.
message OptimizedPropagationAbsolute {
	uint32 min_pass_number = 1; // Minimum number of passes without pass optimization.
	uint32 stop_condition_absolute_value = 2; // Absolute photometric value of pixel standard deviation threshold
}

// If several stop conditions are set, the first condition reached ends the simulation.
// If no stop condition is set, the simulation ends when you stop the process.
message DirectMCSimulationProperties {
	optional uint32 stop_condition_rays_number = 1; // To stop the simulation after a certain number of rays were sent
	optional int64 stop_condition_duration = 2; // To stop the simulation after a certain duration
	int32 automatic_save_frequency = 3; // Define a backup interval (s). This option is useful when computing long simulations. But a reduced number of save operations naturally increases the simulation performance
}

// If several stop conditions are set, the first condition reached ends the simulation.
// If no stop condition is set, the simulation ends when you stop the process.
message InverseMCSimulationProperties {
	oneof optimized_propagation {
		OptimizedPropagationNone optimized_propagation_none = 1; // No optimization. Don't forget to fill stop conditions if needed.
		OptimizedPropagationRelative optimized_propagation_relative = 2;
		OptimizedPropagationAbsolute optimized_propagation_absolute = 3;
	}
	optional int64 stop_condition_duration = 5; // To stop the simulation after a certain duration
	int32 automatic_save_frequency = 4; // Define a backup interval (s). This option is useful when computing long simulations. But a reduced number of save operations naturally increases the simulation performance
}
